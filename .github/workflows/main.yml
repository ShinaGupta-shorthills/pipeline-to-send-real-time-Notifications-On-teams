name: Deploy EC2 Ubuntu Instance

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      deploy-result: ${{ steps.deploy-check.outcome }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create SSH key file
        run: |
          echo "${{ secrets.DEVOPS_KEY }}" > devops-key-1.pem
          chmod 400 devops-key-1.pem

      - name: Launch EC2 instance
        id: ec2-launch
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-0c7217cdde317cfec \
            --count 1 \
            --instance-type t2.micro \
            --key-name devops-key-1 \
            --security-group-ids sg-03eebec8dc1bbd9df \
            --subnet-id subnet-0ba04bb1a5c049ec7 \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=MyUbuntuInstance}]' \
            --region us-east-1 \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "Launched instance with ID: $INSTANCE_ID"
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

          aws ec2 wait instance-running --instance-ids $INSTANCE_ID --region us-east-1

          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --region us-east-1 \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)

          echo "EC2_PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "Instance Public IP: $PUBLIC_IP"

      - name: Wait for EC2 SSH to become available
        run: |
          echo "Waiting 60 seconds for SSH service to be ready..."
          sleep 60

      - name: Install Nginx on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i devops-key-1.pem ubuntu@$EC2_PUBLIC_IP << EOF
            sudo apt update
            sudo apt install -y nginx
            sudo systemctl enable nginx
            sudo systemctl start nginx
          EOF

      - name: Mark deployment step status
        id: deploy-check
        run: echo "done"
        # This step simply exists to get the job outcome to outputs

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()  # Ensure it runs even if deploy job fails

    steps:
      - name: Send deployment result email
        uses: dawidd6/action-send-mail@v3
        with:
          # SMTP server credentials stored in secrets
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: EC2 Deployment Result - ${{ needs.deploy.result == 'success' && 'PASS' || 'FAIL' }}
          to: youremail@example.com  # Change to your actual email or pass as secret
          from: yourbot@example.com  # Sender email
          body: |
            The EC2 Deployment workflow has completed.
            Result: ${{ needs.deploy.result == 'success' && 'PASS' || 'FAIL' }}.

            Please check the GitHub Actions logs for details.
